#!/bin/bash
# 2013-06-18: Derek Gottlieb (asndbg)
#
# If supplied with a binary, generate assembly using objdump. 
#
# If supplied with assembly generated by objdump, use it directly. 
#
# Then grep assembly looking for any of the opcodes in the specified opcode.txt
# file, indicating which opcodes were found (so we can double check manually).

usage()
{
 cat << EOF
 Usage: $0 options

 OPTIONS:
  -h       Show this message
  -v       Verbose
  -b file  Binary file
  -d file  "objdump -d" output for binary
  -o file  File containing opcodes to test for
EOF
}

VERBOSE=0
BINARY=
OBJDUMP_FILE=
DELETE_OBJDUMP_FILE=1
OPCODES=

while getopts "hvb:d:o:" OPTION
do
 case $OPTION in
  h)
   usage
   exit 1
   ;;
  v)
   VERBOSE=1
   ;;
  b)
   BINARY=$OPTARG
   ;;
  d)
   OBJDUMP_FILE=$OPTARG
   DELETE_OBJDUMP_FILE=0
   ;;
  o)
   OPCODES=$OPTARG
   ;;
  ?)
   usage
   exit 1
   ;;
 esac
done

if [ -z $OPCODES ]; then
 usage
 exit 1
fi

if [ -z $OBJDUMP_FILE ] && [ -z $BINARY ]; then
 usage
 exit 1
fi

if [ -z $OBJDUMP_FILE ]; then 
 OBJDUMP_FILE=$(mktemp)
 objdump --no-show-raw-insn -d $BINARY > $OBJDUMP_FILE
fi

FOUND=0
for op in $(cat $OPCODES)
do
 [ "$VERBOSE" -gt 0 ] && printf "\tTesting $op..."
 op_found=$(grep "$op " $OBJDUMP_FILE | awk '{print $2}' | grep -c "^$op$")
 #op_found=$(awk '/$op/ {print $2}' $OBJDUMP_FILE | sort | uniq | wc -l)

 if [ $op_found -gt 0 ]; then
  [ "$VERBOSE" -gt 0 ] && printf "\tFound $op!"
  if [ "$VERBOSE" -gt 0 ]; then
   matches=$(grep "$op " $OBJDUMP_FILE | awk '{print $2}' | grep "^$op$" | sort | uniq | sed ':a;N;$!ba;s/\n/,/g')
   printf "\n\t\tMatches found: $matches"
  fi

  FOUND=$((FOUND + 1))
 fi
 [ "$VERBOSE" -gt 0 ] && printf "\n"
done

printf "\tFound $FOUND different opcodes from $OPCODES\n\n"

if [ $DELETE_OBJDUMP_FILE -gt 0 ]; then
 rm -f $OBJDUMP_FILE
fi

exit 0
